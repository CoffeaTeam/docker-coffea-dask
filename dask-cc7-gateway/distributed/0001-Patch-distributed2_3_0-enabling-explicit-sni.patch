diff --git a/distributed/cli/dask_worker.py b/distributed/cli/dask_worker.py
index 707a4103..a588bf21 100755
--- a/distributed/cli/dask_worker.py
+++ b/distributed/cli/dask_worker.py
@@ -234,6 +234,12 @@ pem_file_option_type = click.Path(exists=True, resolve_path=True)
     help="Module that should be loaded by each nanny "
     'like "foo.bar" or "/path/to/foo.py"',
 )
+@click.option(
+    "--scheduler-sni",
+    type=str,
+    default=None,
+    help="Scheduler SNI (if different from scheduler hostname)"
+)
 @click.version_option()
 def main(
     scheduler,
diff --git a/distributed/cli/tests/test_tls_cli.py b/distributed/cli/tests/test_tls_cli.py
index def31bc2..8cf8d359 100644
--- a/distributed/cli/tests/test_tls_cli.py
+++ b/distributed/cli/tests/test_tls_cli.py
@@ -39,6 +39,16 @@ def test_basic(loop):
             ) as c:
                 wait_for_cores(c)
 
+def test_sni(loop):
+    with popen(["dask-scheduler", "--no-dashboard"] + tls_args) as s:
+        with popen(
+            ["dask-worker", "--no-dashboard", "--scheduler-sni", "localhost",
+             "tls://127.0.0.1:8786"] + tls_args
+        ) as w:
+            with Client(
+                "tls://127.0.0.1:8786", loop=loop, security=tls_security()
+            ) as c:
+                wait_for_cores(c)
 
 def test_nanny(loop):
     with popen(["dask-scheduler", "--no-dashboard"] + tls_args) as s:
diff --git a/distributed/comm/tcp.py b/distributed/comm/tcp.py
index d92f83fa..81f85d9c 100644
--- a/distributed/comm/tcp.py
+++ b/distributed/comm/tcp.py
@@ -347,9 +347,17 @@ class BaseTCPConnector(Connector, RequireEncryptionMixin):
         kwargs = self._get_connect_args(**connection_args)
 
         try:
-            stream = await self.client.connect(
-                ip, port, max_buffer_size=MAX_BUFFER_SIZE, **kwargs
-            )
+            # server_hostname option (for SNI) only works with tornado.iostream.IOStream
+            if "server_hostname" in kwargs:
+                plain_stream = await self.client.connect(
+                    ip, port, max_buffer_size=MAX_BUFFER_SIZE
+                )
+                stream = await plain_stream.start_tls(False, **kwargs)
+            else:
+                stream = await self.client.connect(
+                    ip, port, max_buffer_size=MAX_BUFFER_SIZE, **kwargs
+                )
+
             # Under certain circumstances tornado will have a closed connnection with an error and not raise
             # a StreamClosedError.
             #
@@ -386,8 +394,10 @@ class TLSConnector(BaseTCPConnector):
     encrypted = True
 
     def _get_connect_args(self, **connection_args):
-        ctx = _expect_tls_context(connection_args)
-        return {"ssl_options": ctx}
+        tls_args = {"ssl_options": _expect_tls_context(connection_args)}
+        if connection_args.get("server_hostname"):
+            tls_args["server_hostname"] = connection_args["server_hostname"]
+        return tls_args
 
 
 class BaseTCPListener(Listener, RequireEncryptionMixin):
diff --git a/distributed/worker.py b/distributed/worker.py
index 2fabf256..19d77557 100644
--- a/distributed/worker.py
+++ b/distributed/worker.py
@@ -332,6 +332,7 @@ class Worker(ServerNode):
         lifetime=None,
         lifetime_stagger=None,
         lifetime_restart=None,
+        scheduler_sni=None,
         **kwargs,
     ):
         self.tasks = dict()
@@ -512,7 +513,8 @@ class Worker(ServerNode):
         self.security = security or Security()
         assert isinstance(self.security, Security)
         self.connection_args = self.security.get_connection_args("worker")
-
+        if scheduler_sni:
+            self.connection_args["server_hostname"] = scheduler_sni
         self.memory_limit = parse_memory_limit(memory_limit, self.nthreads)
 
         self.paused = False
